@page "/Order/Display/{OrderId:int}"

@inject IFoodData foodData;
@inject IOrderData orderData;
@inject NavigationManager navigationManager;
@using BlazorServer.Models;


<h3>Display</h3>

@if (@order is null)
{
    <h4>No record found...</h4>
}
else if (@order is null)
{
    <h4>Record Loading...</h4>
}
else
{
    <table class="table">
        <tbody>
            <tr>
                <td><strong>OrderName</strong></td>
                <td>@order.OrderName</td>
            </tr>
            <tr>
                <td><strong>Order Date</strong></td>
                <td>@order.OrderDate</td>
            </tr>
            <tr>
                <td><strong>Order Total</strong></td>
                <td>@string.Format("{0:C}", @order.Total)</td>
            </tr>
            <tr>
                <td><strong>Item Ordered</strong></td>
                <td>@itemPurchased</td>
            </tr>
            <tr>
                <td><strong>Quantity Ordered</strong></td>
                <td>@order.Quantity</td>
            </tr>
            <tr>
                <td colspan="2">
                    @if (confirmDelete)
                    {
                        <button class="btn btn-outline-danger" @onclick="HandleDeleteRecord">
                            Confirm Delete
                        </button>
                        <button class="btn btn-secondary" @onclick="(() => confirmDelete = false)">
                            Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-danger" @onclick="(() => confirmDelete = true)">
                            Delete Order
                        </button>
                    }
                </td>
            </tr>
        </tbody>
    </table>

    <EditForm Model="@updateModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary Model="@updateModel"></ValidationSummary>

        <div class="form-group">
            <label class="control-label">Name for the Order</label>
            <InputText @bind-Value="updateModel.OrderName" class="form-control"></InputText>
            <ValidationMessage For="@(()=> updateModel.OrderName)" class="text-danger"></ValidationMessage>
        </div>

        <div class="form-group">
            <input type="submit" value="Update Order Name" class="btn btn-primary" />
        </div>
    </EditForm>

}

@code {
    [Parameter]
    public int orderId { get; set; }

    private OrderModel order;
    private string itemPurchased;
    private OrderUpdateModel updateModel = new OrderUpdateModel();
    private bool confirmDelete = false;
    private bool recordNotFound = false;


    protected override async Task OnInitializedAsync()
    {

        order = await orderData.GetOrderByOrderId(orderId);

        if (order != null)
        {
            var food = await foodData.GetFood();

            itemPurchased = food.Where(x => x.FoodId == order.FoodId).FirstOrDefault()?.Title;

            updateModel.OrderId = order.OrderId;
            updateModel.OrderName = order.OrderName;
        }
        else
        {
            recordNotFound = true;
        }
    }

    private async Task HandleValidSubmit()
    {
        await orderData.UpdateOrderNameByOrderId(updateModel.OrderId, updateModel.OrderName);
        order.OrderName = updateModel.OrderName;
    }

    private async Task HandleDeleteRecord()
    {
        await orderData.DeleteOrder(orderId);
        navigationManager.NavigateTo("food/list");
    }
}